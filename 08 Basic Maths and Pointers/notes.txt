# Basic Maths for DSA

## Prime Numbers
- A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
- Examples: 2, 3, 5, 7, 11, 13, ...

## Greatest Common Divisor (GCD)
- The GCD of two integers is the largest positive integer that divides both numbers without leaving a remainder.
- Example: GCD of 8 and 12 is 4.

## Least Common Multiple (LCM)
- The LCM of two integers is the smallest positive integer that is divisible by both numbers.
- Example: LCM of 4 and 5 is 20.

## Modular Arithmetic
- Modular arithmetic is a system of arithmetic for integers, where numbers "wrap around" after reaching a certain valueâ€”the modulus.
- Example: 7 mod 3 is 1.

# Sieve of Eratosthenes

## Introduction
- The Sieve of Eratosthenes is an efficient algorithm to find all prime numbers up to a given limit `n`.
- It works by iteratively marking the multiples of each prime number starting from 2.

## Steps
1. Create a boolean array `prime[0..n]` and initialize all entries as true. A value in `prime[i]` will be false if `i` is not a prime.
2. Start with the first prime number, p = 2.
3. Mark all multiples of p as false.
4. Find the next number greater than p that is true. If there is no such number, stop.
5. Repeat step 3 and 4 until p^2 > n.

## Example
To find all primes less than 30:
1. Initialize: `prime[0..30] = {true, true, true, ..., true}`
2. p = 2, mark multiples of 2: `prime[4], prime[6], prime[8], ..., prime[30]` as false.
3. p = 3, mark multiples of 3: `prime[9], prime[12], prime[15], ..., prime[30]` as false.
4. Continue with p = 5, p = 7, etc.

## Time Complexity
- The time complexity of the Sieve of Eratosthenes is O(n log log n).
- This is because each prime number p marks its multiples in the range up to n, and the number of operations for each prime is approximately n/p.

# Modular Arithmetic in DSA

## Introduction
- Modular arithmetic is a fundamental concept in number theory and computer science.
- It deals with integers and a modulus, where numbers wrap around upon reaching the modulus value.

## Properties
1. **Addition**: (a + b) mod n = [(a mod n) + (b mod n)] mod n
2. **Subtraction**: (a - b) mod n = [(a mod n) - (b mod n) + n] mod n
3. **Multiplication**: (a * b) mod n = [(a mod n) * (b mod n)] mod n
4. **Exponentiation**: (a^b) mod n can be computed efficiently using modular exponentiation.

## Applications
- **Cryptography**: Many encryption algorithms, such as RSA, rely on modular arithmetic.
- **Hash Functions**: Used in hash functions to ensure values stay within a fixed range.
- **Random Number Generators**: Often use modular arithmetic to produce numbers within a desired range.

## Example Problems
1. **Finding the remainder**: Compute 17 mod 5.
    - Solution: 17 mod 5 = 2.
2. **Modular Addition**: Compute (7 + 5) mod 3.
    - Solution: (7 + 5) mod 3 = 12 mod 3 = 0.
3. **Modular Multiplication**: Compute (4 * 6) mod 5.
    - Solution: (4 * 6) mod 5 = 24 mod 5 = 4.

## Modular Exponentiation
- To compute (a^b) mod n efficiently, use the method of exponentiation by squaring.
- Example: Compute (3^10) mod 7.
  - Solution: (3^10) mod 7 = 4.

